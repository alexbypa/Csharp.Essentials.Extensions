services:
  db:
    container_name: postgres-container
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: test_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck: # DEFINISCE QUANDO IL DB Ãˆ VERAMENTE PRONTO
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  pgadmin:
    container_name: pgadmin4-container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80" 
    volumes:
      - pgadmin-data:/var/lib/pgadmin
  webapi:
    build:
      context: .
      dockerfile: docker
    restart: no
    ports:
      # Mappa la porta esterna 8080 alla porta 80 del container
      - "1234:8080"
    depends_on:
      db:
        condition: service_healthy # L'API aspetta che Postgres sia sano (passi il test healthcheck)
    environment:
      DatabaseProvider: ${DatabaseProvider}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:8080 
      ConnectionStrings__Default: ${ConnectionStrings__Default}
volumes:
  postgres-data:
  pgadmin-data: