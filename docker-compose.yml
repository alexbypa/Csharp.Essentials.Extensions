services:
  elasticsearch:
    profiles: ["postgres", "mssql"] 
    image: elastic/elasticsearch:8.17.10 # Usa un tag specifico
    container_name: elasticsearch-container
    environment:
      # Permette di eseguire in modalità single-node non sicura (per la demo)
      - discovery.type=single-node
      - xpack.security.enabled=false # Disabilita la sicurezza a pagamento
    ports:
      - "9200:9200" # Porta API
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
  kibana:
    profiles: ["postgres", "mssql"] 
    image: elastic/kibana:9.1.4
    container_name: kibana-container
    ports:
      - "5601:5601"
    environment:
      # Assicurati che Kibana punti al Container Elasticsearch corretto
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 
    depends_on:
      - elasticsearch
  mssql:
    profiles: ["mssql"] 
    # Nome del container MSSQL
    container_name: mssql-container
    # Immagine ufficiale Microsoft SQL Server per Linux (richiede licenza o EULA accettata)
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: always
    environment:
      ACCEPT_EULA: Y
      # **PASSWORD CRITICA**: Deve essere sicura e utilizzata nella stringa di connessione
      SA_PASSWORD: "strong!password#123"
    ports:
      # Mappa la porta standard di MSSQL all'esterno
      - "1433:1433"
    volumes:
      # Volume per la persistenza dei dati MSSQL
      - mssql-data:/var/opt/mssql
    healthcheck: # Controlla se l'istanza è pronta per le connessioni
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'strong!password#123' -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
  adminer:
    profiles: ["postgres", "mssql"] 
    container_name: adminer-container
    image: adminer:latest
    restart: always
    ports:
      - "8081:8080" # Porta esterna 8081 per Adminer
    depends_on:
      db:
        condition: service_healthy
        required: false 
      mssql:
        condition: service_healthy        
        required: false         
  db:
    profiles: ["postgres"] 
    container_name: postgres-container
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: test_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck: # DEFINISCE QUANDO IL DB È VERAMENTE PRONTO
      test: ["CMD-SHELL", "pg_isready -U root -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  pgadmin:
    profiles: ["postgres"] 
    container_name: pgadmin4-container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80" 
    volumes:
      - pgadmin-data:/var/lib/pgadmin
  webapi:
    profiles: ["postgres", "mssql"] 
    # ELIMINATO: La sezione 'build' non deve esserci per forzare il download dall'Hub
    build:
      context: .
      dockerfile: Web.Api.Dockerfile
    
    # AGGIUNTO: Punta all'immagine pubblica e al tag corretto
    # image: alexbypa/loggerhelper-api:1.0.1

    restart: no
    ports:
      # Mappa la porta esterna 8080 alla porta 80 del container
      - "1234:8080"
    # depends_on:
      # db:
        # condition: service_healthy # L'API aspetta che Postgres sia sano (passi il test healthcheck)
        # #required: false # <- NON è richiesto per l'avvio di webapi        
      # mssql:
        # condition: service_healthy # L'API aspetta che Postgres sia sano (passi il test healthcheck)
        # #required: false # <- NON è richiesto per l'avvio di webapi        
    environment:
      DatabaseProvider: ${DatabaseProvider}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://+:8080 
      ConnectionStrings__Default: ${ConnectionStrings__Default}
      Serilog__SerilogConfiguration__LoggerTelemetryOptions__ConnectionString: ${Serilog__SerilogConfiguration__LoggerTelemetryOptions__ConnectionString}
volumes:
  postgres-data:
  pgadmin-data:
  mssql-data:
  elasticsearch-data: